// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Identify {
    // message fields
    protocolVersion: ::protobuf::SingularField<::std::string::String>,
    agentVersion: ::protobuf::SingularField<::std::string::String>,
    publicKey: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    listenAddrs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    observedAddr: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    protocols: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Identify {}

impl Identify {
    pub fn new() -> Identify {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Identify {
        static mut instance: ::protobuf::lazy::Lazy<Identify> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Identify,
        };
        unsafe {
            instance.get(|| {
                Identify {
                    protocolVersion: ::protobuf::SingularField::none(),
                    agentVersion: ::protobuf::SingularField::none(),
                    publicKey: ::protobuf::SingularField::none(),
                    listenAddrs: ::protobuf::RepeatedField::new(),
                    observedAddr: ::protobuf::SingularField::none(),
                    protocols: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string protocolVersion = 5;

    pub fn clear_protocolVersion(&mut self) {
        self.protocolVersion.clear();
    }

    pub fn has_protocolVersion(&self) -> bool {
        self.protocolVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocolVersion(&mut self, v: ::std::string::String) {
        self.protocolVersion = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocolVersion(&mut self) -> &mut ::std::string::String {
        if self.protocolVersion.is_none() {
            self.protocolVersion.set_default();
        };
        self.protocolVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocolVersion(&mut self) -> ::std::string::String {
        self.protocolVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_protocolVersion(&self) -> &str {
        match self.protocolVersion.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional string agentVersion = 6;

    pub fn clear_agentVersion(&mut self) {
        self.agentVersion.clear();
    }

    pub fn has_agentVersion(&self) -> bool {
        self.agentVersion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_agentVersion(&mut self, v: ::std::string::String) {
        self.agentVersion = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_agentVersion(&mut self) -> &mut ::std::string::String {
        if self.agentVersion.is_none() {
            self.agentVersion.set_default();
        };
        self.agentVersion.as_mut().unwrap()
    }

    // Take field
    pub fn take_agentVersion(&mut self) -> ::std::string::String {
        self.agentVersion.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_agentVersion(&self) -> &str {
        match self.agentVersion.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional bytes publicKey = 1;

    pub fn clear_publicKey(&mut self) {
        self.publicKey.clear();
    }

    pub fn has_publicKey(&self) -> bool {
        self.publicKey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_publicKey(&mut self, v: ::std::vec::Vec<u8>) {
        self.publicKey = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publicKey(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.publicKey.is_none() {
            self.publicKey.set_default();
        };
        self.publicKey.as_mut().unwrap()
    }

    // Take field
    pub fn take_publicKey(&mut self) -> ::std::vec::Vec<u8> {
        self.publicKey.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_publicKey(&self) -> &[u8] {
        match self.publicKey.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated bytes listenAddrs = 2;

    pub fn clear_listenAddrs(&mut self) {
        self.listenAddrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_listenAddrs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.listenAddrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_listenAddrs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.listenAddrs
    }

    // Take field
    pub fn take_listenAddrs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.listenAddrs, ::protobuf::RepeatedField::new())
    }

    pub fn get_listenAddrs(&self) -> &[::std::vec::Vec<u8>] {
        &self.listenAddrs
    }

    // optional bytes observedAddr = 4;

    pub fn clear_observedAddr(&mut self) {
        self.observedAddr.clear();
    }

    pub fn has_observedAddr(&self) -> bool {
        self.observedAddr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_observedAddr(&mut self, v: ::std::vec::Vec<u8>) {
        self.observedAddr = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_observedAddr(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.observedAddr.is_none() {
            self.observedAddr.set_default();
        };
        self.observedAddr.as_mut().unwrap()
    }

    // Take field
    pub fn take_observedAddr(&mut self) -> ::std::vec::Vec<u8> {
        self.observedAddr.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_observedAddr(&self) -> &[u8] {
        match self.observedAddr.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated string protocols = 3;

    pub fn clear_protocols(&mut self) {
        self.protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_protocols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.protocols
    }

    // Take field
    pub fn take_protocols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.protocols, ::protobuf::RepeatedField::new())
    }

    pub fn get_protocols(&self) -> &[::std::string::String] {
        &self.protocols
    }
}

impl ::protobuf::Message for Identify {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                5 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.protocolVersion));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.agentVersion));
                },
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.publicKey));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.listenAddrs));
                },
                4 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.observedAddr));
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.protocols));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.protocolVersion.iter() {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in self.agentVersion.iter() {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        for value in self.publicKey.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.listenAddrs.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.observedAddr.iter() {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in self.protocols.iter() {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.protocolVersion.as_ref() {
            try!(os.write_string(5, &v));
        };
        if let Some(v) = self.agentVersion.as_ref() {
            try!(os.write_string(6, &v));
        };
        if let Some(v) = self.publicKey.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        for v in self.listenAddrs.iter() {
            try!(os.write_bytes(2, &v));
        };
        if let Some(v) = self.observedAddr.as_ref() {
            try!(os.write_bytes(4, &v));
        };
        for v in self.protocols.iter() {
            try!(os.write_string(3, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Identify>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Identify {
    fn new() -> Identify {
        Identify::new()
    }

    fn descriptor_static(_: ::std::option::Option<Identify>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "protocolVersion",
                    Identify::has_protocolVersion,
                    Identify::get_protocolVersion,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "agentVersion",
                    Identify::has_agentVersion,
                    Identify::get_agentVersion,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "publicKey",
                    Identify::has_publicKey,
                    Identify::get_publicKey,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_bytes_accessor(
                    "listenAddrs",
                    Identify::get_listenAddrs,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "observedAddr",
                    Identify::has_observedAddr,
                    Identify::get_observedAddr,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_string_accessor(
                    "protocols",
                    Identify::get_protocols,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Identify>(
                    "Identify",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Identify {
    fn clear(&mut self) {
        self.clear_protocolVersion();
        self.clear_agentVersion();
        self.clear_publicKey();
        self.clear_listenAddrs();
        self.clear_observedAddr();
        self.clear_protocols();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Identify {
    fn eq(&self, other: &Identify) -> bool {
        self.protocolVersion == other.protocolVersion &&
        self.agentVersion == other.agentVersion &&
        self.publicKey == other.publicKey &&
        self.listenAddrs == other.listenAddrs &&
        self.observedAddr == other.observedAddr &&
        self.protocols == other.protocols &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Identify {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x12, 0x73, 0x72, 0x63, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x70,
    0x62, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x12, 0x28,
    0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
    0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e,
    0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
    0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
    0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
    0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69,
    0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
    0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
    0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x0c, 0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
    0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20,
    0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x4a, 0xff,
    0x09, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x1a, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03,
    0x00, 0x08, 0x13, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x02, 0x00, 0x1a, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x02, 0x08, 0x10, 0x0a, 0x58, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x05, 0x02, 0x26, 0x1a, 0x38, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,
    0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
    0x69, 0x74, 0x79, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x70, 0x65, 0x65, 0x72,
    0x73, 0x0a, 0x22, 0x11, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x69, 0x70, 0x66, 0x73, 0x2f, 0x31,
    0x2e, 0x30, 0x2e, 0x30, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x05, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x05, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05, 0x12, 0x21, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x05, 0x24, 0x25, 0x0a, 0x9f, 0x01,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x09, 0x02, 0x23, 0x1a, 0x7c, 0x20, 0x61, 0x67,
    0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69,
    0x6b, 0x65, 0x20, 0x61, 0x20, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x20, 0x73,
    0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72,
    0x73, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x62, 0x69, 0x74, 0x74, 0x6f, 0x72, 0x72, 0x65,
    0x6e, 0x74, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x22, 0x14, 0x20, 0x65, 0x2e, 0x67, 0x2e,
    0x20, 0x67, 0x6f, 0x2d, 0x69, 0x70, 0x66, 0x73, 0x2f, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x09, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x09, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x09, 0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x09, 0x21, 0x22, 0x0a, 0xe3, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x0e, 0x02, 0x1f, 0x1a, 0xd5, 0x01, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
    0x65, 0x79, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x27,
    0x73, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x28, 0x77, 0x68,
    0x69, 0x63, 0x68, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x67, 0x69, 0x76, 0x65, 0x73, 0x20, 0x69,
    0x74, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x44, 0x29, 0x0a, 0x20, 0x2d, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
    0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72,
    0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65,
    0x73, 0x20, 0x69, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65,
    0x6e, 0x74, 0x2e, 0x0a, 0x20, 0x2d, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x67, 0x61, 0x69,
    0x6e, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x77, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20,
    0x2f, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
    0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2c, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x73, 0x74,
    0x69, 0x6c, 0x6c, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x0e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x0e, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x0e, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x0e, 0x1d, 0x1e, 0x0a, 0x5d, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x11,
    0x02, 0x21, 0x1a, 0x50, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x73,
    0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64,
    0x64, 0x72, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6e,
    0x6f, 0x64, 0x65, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x6f, 0x70, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x6f, 0x6e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x11,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x11, 0x0b, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x11, 0x11, 0x1c, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x11, 0x1f, 0x20, 0x0a, 0x81, 0x02, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x16, 0x02, 0x22, 0x1a, 0xf3, 0x01, 0x20, 0x6f, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
    0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x65,
    0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73,
    0x0a, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
    0x63, 0x6f, 0x6e, 0x76, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x20,
    0x68, 0x65, 0x6c, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
    0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x0a, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,
    0x6d, 0x69, 0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x74, 0x73,
    0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x67, 0x6f,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x4e, 0x41, 0x54, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x16, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x16, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x16, 0x11, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x04, 0x03, 0x12, 0x03, 0x16, 0x20, 0x21, 0x0a, 0x3e, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05,
    0x12, 0x03, 0x19, 0x02, 0x20, 0x1a, 0x31, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
    0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05,
    0x04, 0x12, 0x03, 0x19, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12,
    0x03, 0x19, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x19,
    0x12, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x19, 0x1e, 0x1f,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
